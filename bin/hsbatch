#!/bin/bash

set -e

self_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source "${self_dir}"/pscommon.sh

if [[ "$#" -lt 6 ]]
then
	echo "Usage: $0 arch mem_per_cpu nodes num_tasks max_time command arg..." 1>&2
	exit 1
fi

arch=$1
gpu=$2
mem_per_cpu=$3
nodes=$4
tasks=$5
max_time=$6
shift 6

logdir="logs"
mkdir -p "${logdir}"

name="j-$(echo "$@" | sed -e 's/\s\+/_/g' -e 's@/@-@g' | cut -c1-128)_$(date +%Y%m%d%H%M%S)"

args=(--nodes "${nodes}" --ntasks "${tasks}"
	--mem-per-cpu "${mem_per_cpu}"
	--time "${max_time}"
	--output "${logdir}/${name}.out" --error "${logdir}/${name}.err")
CONSTRAINT="$(constraint "${arch}")" 
if [ -n "${CONSTRAINT}" ]
then
	args+=(--constraint "${CONSTRAINT}")
fi
if [ -n "${gpu}" ]
then
	args+=(--gres "gpu:${gpu}")
fi
cmd=(sbatch "${args[@]}" "$@")
echo "${cmd[@]}"
out=$(${cmd[@]})
echo "$out"
jobid=$(echo "$out" | sed 's/^Submitted batch job \([0-9]\+\)$/\1/')
echo "Job ID: $jobid"

while true # while job state is not 'running'
do
	cmd=(squeue -j ${jobid})
	run "${cmd[@]}"
	state=$(${cmd[@]} -o '%t' --noheader)
	if [ -z "$state" ]
	then
		echo "Job finished"
		finished=1
		break
	fi
	if [[ "$state" = "R" ]]
	then
		break
	fi
	sleep 60
done

logs=("${logdir}"/${name}.{out,err})
if [ -z "$finished" ]
then
	while ! test -f "${logs[0]}" -a -f "${logs[1]}"
	do
		echo "Waiting for log files to be created..."
		sleep 10
	done
	cat "${logs[@]}"
	run tail -f "${logs[@]}"
else
	cat "${logs[@]}"
fi
