#!/usr/bin/env bash

# Wrapper for launching OpenMPI tools on Theta: mpirun, prun, prte, pterm, etc

set -e

if [[ -z "$EPREFIX" ]]
then
	echo "ERROR: env var EPREFIX not set to root dir of prefix" 1>&2
	echo "       (was script run not from within prefix?)" 1>&2
	exit 2
fi

omp_tool=$(basename $0)

args=()
mpirun_args=(
	# -v

	# Fix for env var not propagating with prun (PRRTE PR #795)
	--personality ompi
)

# mpirun needs to talk to ALPS, so it neds to load its libs at runtime
alps_libs=(cray-alps cray-pmi cray-xpmem cray-ugni cray-wlm_detect
		cray-udreg cray-sysutils)

alps_libs_paths="$(PATH=$HOST_PATH pkg-config ${alps_libs[@]} --libs-only-L | \
	sed 's/ \?-L/:/g' | cut -d':' -f2- )"

# By default mpirun adds Prefix to LD_LIBRARY_PATH, which breaks loading
# of host's /bin/bash by aprun (when launching orted -- aprun executes the
# command given to it via the host's shell). The value for the prefix that
# mpirun chooses is either the prefix from the path to the mpirun binary
# OR the --prefix argument when given.
#
# So, we have to pass --prefix and point it to a non-existant path.
# However when passing --prefix, mpirun cannot be invoked by a full path,
# because then mpirun autodetects this as a conflict between --prefix and
# the full path (instead of just taking --prefix as the overriding one).
# So, we invoke mpirun via the executable name by appending Prefix to
# PATH.
if [[ "${omp_tool}" != pterm ]]
then
	args+=(--prefix /dev/null)
	args+=("${mpirun_args[@]}")
fi

if [[ -n "${DBG}" ]]
then
	DBG_CMD=(gdb --args)
fi

# Host PATH needed for apstat which is invoked downstream of this cmd
PATH=$PATH:$HOST_PATH LD_LIBRARY_PATH="${alps_libs_paths}" \
	exec env ${DBG_CMD[@]} ${EPREFIX}/usr/bin/${omp_tool} ${args[@]} "$@"
