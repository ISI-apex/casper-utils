#!/bin/bash

set -e

self_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
EPREFIX=$(cd -- "$(dirname ${self_dir})"/ && pwd)
source "${self_dir}"/pscommon.sh

if [[ "$#" -lt 7 ]]
then
	echo "Usage: $0 cluster[:part] arch[:gpu] mem_per_cpu nodes tasks_per_node max_time command arg..." 1>&2
	exit 1
fi

cluster_part=$1
arch_gpu=$2
mem_per_cpu=$3
nodes=$4
tasks_per_node=$5
max_time=$6
shift 6

if [[ "${cluster_part}" =~ : ]]
then
	cluster="$(echo ${cluster_part} | cut -d':' -f1)"
	part="$(echo ${cluster_part} | cut -d':' -f2)"
else
	cluster="${cluster_part}"
	part=""
fi

if [[ "${arch_gpu}" =~ : ]]
then
	arch="$(echo ${arch_gpu} | cut -d':' -f1)"
	gpu="$(echo ${arch_gpu} | cut -d':' -f2-)"
else
	arch="${arch_gpu}"
	gpu=""
fi

sbatch_args=()
while [[ "$1" = -* ]]
do
	sbatch_args+=("$1")
	shift
done

# External interface: by default monitoring enabled, to disable set to 0
if [[ "${MONITOR}" = "0" ]]
then
	MONITOR=
elif [[ -z "${MONITOR}" ]]
then
	MONITOR=1
fi

logdir=${LOG_DIR:-"${EPREFIX}"/var/log/sjobs}
mkdir -p "${logdir}"

args=(--nodes "${nodes}" --ntasks-per-node "${tasks_per_node}"
	--time "${max_time}")

if [[ -n "${part}" ]]
then
	args+=(--partition "${part}")
fi

if [[ "${mem_per_cpu}" = "all" ]]
then
	args+=(--mem 0)
else
	args+=(--mem-per-cpu "${mem_per_cpu}")
fi

for arg in ${sbatch_args[@]}
do
	if [[ "${arg}" = --output=* ]]
	then
		log_args_found=1
		output_file="${arg#--output=}"
		break
	fi
	if [[ "${arg}" = --error=* ]]
	then
		log_args_found=1
		error_file="${arg#--error=}"
		break
	fi
	if [[ "${arg}" = --job-name=* ]]
	then
		name=${arg#--job-name=}
		break
	fi
done

if [ -z "${name}" ]
then
	name="$(echo "$@" | sed -e 's/\s\+/_/g' \
		-e 's@/@-@g' -e 's@[^A-Za-z0-9]@-@g' | cut -c1-128)"
fi
log_name="$(basename ${EPREFIX})_${name}_$(date +%Y%m%d%H%M%S)_$$"
if [ -z "${output_file}" ]
then
	output_file="${logdir}/${log_name}.out"
	args+=(--output "${output_file}")
fi
if [ -z "${error_file}" ]
then
	error_file="${logdir}/${log_name}.err"
	args+=(--error "${error_file}")
fi
logs=("${output_file}" "${error_file}")

CONSTRAINT="$(constraint "${cluster}" "${arch}")"
if [ -n "${CONSTRAINT}" ]
then
	args+=(--constraint "${CONSTRAINT}")
fi
if [ -n "${gpu}" ]
then
	args+=(--gres "gpu:${gpu}")
fi

if [[ -n "${MONITOR}" ]]
then
	function terminate_tail() {
		if  [[ -n "${TAIL_PID}" ]]
		then
			echo "Terminating tail process..."
			run kill ${TAIL_PID}
			set +e
			run wait ${TAIL_PID} 2>/dev/null
			set -e
		fi
	}
	trap terminate_tail EXIT
	rm -f ${logs[@]}
	touch ${logs[@]}
	tail -f ${logs[@]} &
	TAIL_PID=$!
fi

PCMD=$@
# sbatch's CLI parsing doesn't support quoting, so can't pass command strings
#cmd=(sbatch "${args[@]}" ./startprefix -c \'$PCMD\')
tmpscr="${logdir}"/${log_name}.sh
cat <<EOF > $tmpscr
#!/bin/bash
# When bash invoked with -c, it does not load rcfile
"${EPREFIX}"/startprefix -c "$PCMD"
EOF
chmod +x "${tmpscr}"
echo "${tmpscr}": && cat "${tmpscr}"
cmd=(sbatch "${args[@]}" "${sbatch_args[@]}" "${tmpscr}")
echo "${cmd[@]}"
out=$(${cmd[@]})
echo "$out"
jobid=$(echo "$out" | sed 's/^Submitted batch job \([0-9]\+\)$/\1/')
echo "Job ID: $jobid"
echo "${jobid}" > "${logdir}/${log_name}.job"

if [ -n "${NONBLOCK}" ]
then
	echo "EXITING: non-block mode enabled"
	exit 0
fi

function get_queued_job_state() {
	rund squeue -j "$1" -o '%t' --noheader
}
function get_finished_job_state() {
	# note: the grep is to drop the lines for JOBID.x "steps"
	rund sacct -n --delimiter=" " -p \
		--format="JobId,State,ExitCode,Elapsed" -j "$1" \
		| grep -v "${jobid}\."
}

t_start=$(date +%s)
while true # while job state is not 'running'
do
	DRY=1 get_queued_job_state "${jobid}"
	state=$(runeq get_queued_job_state "${jobid}")
	if [ -z "$state" ]
	then
		break
	fi
	if [[ "$state" != "R" && -n "${MONITOR}" ]]
	then
		# print not as frequently as we check
		t_now=$(date +%s)
		t_elapsed=$((t_now - t_start))
		if [[ "${t_elapsed}" -gt 5 ]]
		then
			rune squeue -j "${jobid}"
		fi
		sleep 2
	else
		sleep 30
	fi
done
# note: at this point, the job is no longer in the queue

DRY=1 get_finished_job_state "${jobid}"
state_exitcode=($(runeq get_finished_job_state "${jobid}"))
entries=(JobId State Exitcode Elapsed)
echo "${entries[@]}: ${state_exitcode[@]}"
echo "${entries[@]}: ${state_exitcode[@]}" >> "${logdir}/${log_name}.job"
state=${state_exitcode[1]}
exitcode=$(echo ${state_exitcode[2]})
if [[ "${state}" != "COMPLETED" || "${exitcode}" != "0:0" ]]
then
	rc=$(echo ${exitcode} | cut -d':' -f1)
	# guard against inconsistent exit code, just in case
	if [[ -z "${rc}" || "${rc}" -eq 0 ]]
	then
		rc=1
	fi
	exit ${rc}
fi
