#!/usr/bin/env python

import pandas as pd
import sys
import argparse

parser = argparse.ArgumentParser(
	description="Print a CSV dataset in pretty formatting")
parser.add_argument('csv_file', nargs='*',
	help='Path to CSV file with the dataset')
parser.add_argument('-s', '--sort',
	help='Comma-separated list of columns by which to sort')
parser.add_argument('-c', '--columns',
	help='Comma-separated list of columns to include')
parser.add_argument('-r', '--rows', type=int, nargs=2,
	help='Print only range of rows')
parser.add_argument('--row', type=int,
	help='Print only one row (given index) with one column per line')
parser.add_argument('--rank', type=int,
	help='Print only the rows for the given rank')
args = parser.parse_args()

# show all rows (set limit to unlimited)
pd.set_option('display.max_rows', None)

for csv_file in args.csv_file:
	d = pd.read_csv(csv_file)

	if args.rank is not None:
		# can't have int columns with nan, so drop nan first
		d = d.dropna(subset=['rank'])
		d['rank'] = d['rank'].astype('int32')
		d = d[d['rank'] == args.rank]

	if args.columns is not None:
		d = d[args.columns.split(',')]

	if args.rows is not None:
		d = d.iloc[args.rows[0]:args.rows[1]]

	if args.sort:
		d = d.sort_values(args.sort.split(','))

	if args.row is not None:
		row = d.iloc[args.row]
		print(row)
	else:
		print(d)
