# Common functionality for creating jobs for collecting datasets,
# where each dataset is defined by the filename (target name).

MAKEFLAGS+=--keep-going

# Some defaults used by various functions here
NOLOCAL?=1
OVERSUBSCRIBE?=
DISPLAYMAP?=
DEDI_NODE_FOR_RANK0?=1

MPIRUN_INTERNAL_ARGS:=--bind-to none

define strip-slash
$(patsubst %/,%,$(1))
endef

DATA_DIR?=$(call strip-slash,$(dir $(firstword $(MAKECMDGOALS))))

$(foreach t,$(MAKECMDGOALS),\
  $(if $(filter $(DATA_DIR),$(call strip-slash,$(dir $(t)))),,\
    $(error Targets have different data directory paths)))

$(DATA_DIR)/:
	mkdir -p $@

EMPTY:=
SPACE:= $(EMPTY) $(EMPTY)

define combine-targets
$(DATA_DIR)/$(subst $(SPACE),+,$(strip $(foreach s,$(1),$(strip $(s)))))
endef
define split-targets
$(subst +,$(SPACE),$(patsubst $(DATA_DIR)/%,%,$(1)))
endef

define target-set-rule
$(DATA_DIR)/$(1): DATS=$(2)
$(DATA_DIR)/$(1): $(if $(IN),$(patsubst %,$(DATA_DIR)/%,$(2)))
$(DATA_DIR)/$(1)^split: $(patsubst %,$(DATA_DIR)/%,$(2)) ;
endef
define target-set
$(eval $(call target-set-rule,$(1),$(2)))
endef

DEFINE:=define
define BC_FUNCS
$(DEFINE) ceil(x) {\n
  auto os,xx;x=-x;os=scale;scale=0\n
  xx=x/1;if(xx>x).=xx--\n
  scale=os;return(-xx)\n
}\n
scale=4;\n
endef
define calc
$(strip $(shell echo -e '$(BC_FUNCS)' '$(1)' | bc))
endef
define sum
$(call calc,$(patsubst %,% +,$(1)) 0)
endef
define max
$(strip $(shell echo '$(1)' | xargs -n 1 echo | sort -nr | head -1))
endef
define greater-eq
$(filter $(call calc,$(1) >= $(2)),1)
endef

# tgt-extract(key, target_name [, default, [optional]]) -> value
define tgt-extract
$(strip $(if $(findstring $(1),$(2)),\
	$(subst $(1)-,,$(filter $(1)-%,$(subst _, ,$(subst ., ,$(2))))),
	$(or $(3),$(if $(4),,$(error Field $(1) not in target name)))))
endef

# tgt-arg(target_name, key, [, arg_name=key, [default]]) -> --key value
define tgt-arg
$(call opt-arg,$(or $(3),$(2)),$(call tgt-extract,$(2),$(1),$(4),optional))
endef

# opt-arg(name, value) -> --name value (if non-empty)
define opt-arg
$(if $(2),--$(1) "$(2)")
endef

COMMA:=,

# tgt-tasks(target_name) -> comma-separated list of algorithm step names
define tgt-tasks
$(strip $(subst -,$(COMMA),$(call tgt-extract,tasks,$(1),,optional)))
endef

define gen-map-by-mods
$(strip $(if $(NOLOCAL),:NOLOCAL)$(if $(OVERSUBSCRIBE),:OVERSUBSCRIBE)$(if $(DISPLAYMAP),:DISPLAY))
endef

# tgt-tasks-per-node(target_name)
define tgt-tasks-per-node
$(strip $(call tgt-extract,tpn,$(1)))
endef

# tgt-nodes(target_name) -> node count (from: ranks/tasks_per_node)
# +1 extra node for dedicating to rank 0
define tgt-nodes
$(strip \
  $(if $(DEDI_NODE_FOR_RANK0),\
    $(call calc,\
      1 + ceil(($(call tgt-extract,ranks,$(1))-1) / \
	$(call tgt-tasks-per-node,$(1)))),\
    $(call calc,\
      ceil($(call tgt-extract,ranks,$(1)) / $(call tgt-tasks-per-node,$(1))))))
endef

# depends on: is-dbg-q(), DBG_Q_MAX_NODES
define cap-job-nodes
$(if $(call is-dbg-q),\
	$(if $(DBG_Q_MAX_NODES),\
		$(if $(filter 1,$(call calc,$(1) <= $(DBG_Q_MAX_NODES))),\
			$(1),$(error Debug queue allows only up to $(DBG_Q_MAX_NODES) nodes)),\
		$(1)),\
	$(if $(filter 1,$(call calc,$(MAIN_Q_MIN_NODES) < $(1))),\
		$(1),$(MAIN_Q_MIN_NODES)))
endef
define required-nodes
$(strip $(call sum,\
  $(foreach t,$(call split-targets,$(1)),$(call tgt-nodes,$(t)))))
endef
define job-nodes
$(strip $(call cap-job-nodes,$(call required-nodes,$(1))))
endef

# Logic to regeneate rankfile and the main target if some make variables change
PRUN_SETTINGS=DEDI_NODE_FOR_RANK0=$(DEDI_NODE_FOR_RANK0)
$(DATA_DIR)/prun_%.settings: PHONY | $(DATA_DIR)/
	[[ -f "$@" && "$$(cat $@)" == "$(PRUN_SETTINGS)" ]] || \
		echo -n "$(PRUN_SETTINGS)" > $@

$(DATA_DIR)/prun_%.rankfile: $(DATA_DIR)/prun_%.settings | $(DATA_DIR)/
	mapranks --ranks "$(call tgt-extract,ranks,$*)" \
		--ranks-per-node "$(call tgt-tasks-per-node,$*)" \
		$(if $(DEDI_NODE_FOR_RANK0),--dedicate-node-to-rank0) "$@"

# hostfile is actually the same for all jobs, the node specification is
# implicit (requests "empty" nodes) and different sets of nodes are chosen
# dynamically for each prun invocation.
#
# Always regenerate hostfile, because DEDI_NODE_FOR_RANK0 may change
$(DATA_DIR)/prun_%.hostfile: $(DATA_DIR)/prun_%.settings | $(DATA_DIR)/
	echo -e $(if $(DEDI_NODE_FOR_RANK0),\
		'+e:1 max_slots=1\n+e:$(call calc,$(call tgt-nodes,$*)-1) max_slots=$(call tgt-tasks-per-node,$*)',\
		'+e:$(call tgt-nodes,$*) max_slots=$(call tgt-tasks-per-node,$*)') > $@

# prun-cmd(target-stem, rankfile|hostfile, filename, env vars)
define prun-cmd
prun $(if $(DVM_URI_FILE),--dvm-uri "file:$(DVM_URI_FILE)") \
	-n "$(call tgt-extract,ranks,$(1))" \
	$(if $(filter %.rankfile,$(2)),\
		--map-by "rankfile:FILE=$(abspath $(2))$(call gen-map-by-mods)",\
		$(if $(filter %.hostfile,$(2)),\
			--map-by "slot$(call gen-map-by-mods)" \
			--hostfile "$(abspath $(2))",\
			$(error prun-cmd: unknown mapping file type: $(2)))) \
	$(patsubst %,-x %,$(3)) $(MPIRUN_ARGS) $(MPIRUN_INTERNAL_ARGS)
endef
# Example usage from the consumer makefile:
#$(DATA_DIR)/ch_%.csv: $(DATA_DIR)/prun_%.rankfile | $(DATA_DIR)/
#	set -o pipefail; \
#	$(call prun-cmd,$*,$<) ./app.sh 2>&1 | tee "$@.log"

define expanded-targets
$(or $(DATS),$(1))
endef
define job-nodes-ovr
$(strip $(or $(NODES),$(call job-nodes,$(call expanded-targets,$(1)))))
endef
# job-nodes-arg(target_name)
define job-nodes-arg
$(strip $(info Nodes required for $(1): \
  $(call required-nodes,$(call expanded-targets,$(1))))\
$(call job-nodes-ovr,$(1)))
endef
# max-time(target_name) -> max allowed job time limit
define max-time-arg
$(strip $(or $(MAX_TIME),\
    $(call max-time-for-nodes,$(call job-nodes-ovr,$(1)))))
endef

.PHONY: PHONY
PHONY: ;

.SECONDARY:
