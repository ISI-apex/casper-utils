#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks=12
#SBATCH --time=23:59:00
#SBATCH --oversubscribe
#SBATCH --output logs/glprefix.out
#SBATCH --error logs/glprefix.err

# For testing in shell:
# 	salloc -N1 --ntasks=24 --time=00:15:00
#
# # To run htop
#	export SCREEN_DIR=screen/$(hostname)
# 	mkdir -p -m700 $SCREEN_DIR
# 	screen

JOBS=$(nproc)

set -e
set -x

# set env var BARE to non-zero value if you just want a prefix,
# but do not want to build the numerical libraries.

STG_HOME=/scratch/acolin

# TMPDIR is set for the job by SLURM
# Note: TMPDIR is in /tmp; not as fast as /dev/shm, but proper and auto cleanup
TMP_HOME=$TMPDIR

PNAME=$1
if [ -z "${PNAME}" ]
then
	echo "ERROR: prefix name not specified as argument" 1>&2
	exit 1
fi
PROFILE=${2:-casper-usc-hpcc-amd64}

if ! which git 2>/dev/null 2>/dev/null
then
	echo "ERROR: git is required but was not found in PATH" 1>&2
	exit 1
fi

STG=${STG_HOME}/casper

# directory with files that accompanies this job
FILES=${STG}/jobs/glprefix

PROJ_HOME=${STG_HOME}
PARENT=$PROJ_HOME/casper
mkdir -p $PARENT
export ROOT=$PARENT/gpref/$PNAME

# Workaround for /etc/profile.d/..mx. setting LD_LIBRARY_PATH: wrap shell
mkdir -p "${TMP_HOME}"/bin
export PATH="${TMP_HOME}/bin:$PATH"
echo '/bin/bash --noprofile "$@"' > "${TMP_HOME}"/bin/bash
chmod +x "${TMP_HOME}"/bin/bash
export SHELL="${TMP_HOME}/bin/bash"

# Prepare the prefix dir, with pre-fetched files
rm -rf "$ROOT"

export PORTAGE_TMPDIR="${TMP_HOME}"
export DISTDIR="$STG/distfiles"

export USE_CPU_CORES=$JOBS
export TODO=noninteractive
export OFFLINE_MODE=1

## Workaround for failure to create a symlink at end of stage1
mkdir -p $ROOT/tmp/var/db/repos/

"${FILES}"/bootstrap-prefix.sh

echo 'ACCEPT_KEYWORDS="~amd64 ~amd64-linux"' >> "$ROOT/etc/portage/make.conf"
# When run in offline mode, bootstrap script disables fetching: re-enable
sed -i '/^FETCH_COMMAND=/d' "$ROOT/etc/portage/make.conf"

cp "${FILES}"/prefixenv "$ROOT/.prefixenv"
sed "s:@__P_DISTDIR__@:${DISTDIR}:" "${FILES}"/prefixrc > "$ROOT"/.prefixrc

# The user/group names don't strictly matter, the UID/GID is taken from
# the prefix dir anyway, but set them to match the host so that ls output
# is consistent.
cat <<EOF > "$ROOT"/.prefixvars
P_DISTDIR="${DISTDIR}"
P_GROUP=lc_jnw2
P_USER=acolin
EOF

# Setup kernel sources
kver="$(uname -r)"
## If it weren't for the patch, a symlink would suffice
##mkdir -p "$ROOT"/usr/src
##ln -sf /usr/src/kernels/$(uname -r) "$ROOT"/usr/src/linux
## ... when patch is needed
mkdir -p "$ROOT"/usr/src/kernels
rsync -aq  /usr/src/kernels/${kver} "$ROOT"/usr/src/kernels/
ln -sf kernels/${kver} "$ROOT"/usr/src/linux
pushd "$ROOT"/usr/src/linux
patch -p1 < "${FILES}"/kernel-no-pie.patch
popd

REPO=casper

# profile that holds files that need to be copied to /etc
REPO_PATH=var/db/repos/${REPO}

# "Upstream" repo: https://github.com/acolinisi/casper-ebuilds
git clone ${STG}/casper-ebuilds "$ROOT"/${REPO_PATH}

mkdir -p "$ROOT"/etc/portage/repos.conf
cat <<EOF > "$ROOT"/etc/portage/repos.conf/casper.conf
[casper]
priority = 51
location = $ROOT/${REPO_PATH}
EOF

prun() {
	"$ROOT"/startprefix -c "$1"
}

# Temporary patch to allow prun; later patched package re-installed
sed -i 's:\(env. -i $RETAIN $SHELL\) -l:\1 --rcfile "${EPREFIX}"/.prefixrc -i "$@":' "$ROOT"/startprefix
sed -i '$ i\RC=$?' "$ROOT"/startprefix
echo 'exit $RC' >> "$ROOT"/startprefix
patch -p1 "$ROOT"/startprefix ${FILES}/startprefix.patch

sed -i 's/^#en_US.UTF-8/en_US.UTF-8/' "$ROOT"/etc/locale.gen
prun "locale-gen"
echo -e "LANG=en_US.UTF-8\nLC_CTYPE=en_US.UTF-8\n" > "$ROOT"/etc/locale.conf

# Remove python-2.7, gcc-9.2 and a few other unnecessary leftovers
prun "emerge --depclean"

prun "eselect profile set ${REPO}:${PROFILE}"

# Manual parts of selecting the profile:
#   Setup files that are not supported by profiles (but we do
#   store them in the profiles directory tree to keep stuff together)
cat "$ROOT"/${REPO_PATH}/profiles/casper/package.license.profile \
	>> "$ROOT"/etc/portage/package.license
cat "$ROOT"/${REPO_PATH}/profiles/usc-hpcc/package.provided.profile \
	>> "$ROOT"/etc/portage/package.provided
mkdir -p "$ROOT"/etc/portage/sets
(
	cd "$ROOT"/${REPO_PATH}/profiles/casper/sets
	for set in *
	do
		ln -sf ../../../${REPO_PATH}/profiles/casper/sets/$set \
 			"$ROOT"/etc/portage/sets/$set
	done
)

sets=()
if [[ -z "$BARE" ]]
then
	sets+=("@casper-libs")
fi

# Apply use flags, overrides from the newly added repo, install sets
prun "emerge -v --deep --complete-graph --update --newuse --newrepo @world ${sets[@]}"

prun "eselect python set python3.8"
